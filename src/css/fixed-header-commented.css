/*  
 *  ============================================================================
 *  Simple single-column CSS with a fixed header
 *  ============================================================================
 *  This CSS file is designed to be as simple as possible while still giving
 *  good-looking results. It should be mobile-friendly, and is also designed to 
 *  aid with accessibility.
 *
 *  There is no 'reset' section -- the styles modify the browser defaults.
 *
 *  This is based on the simple.css file, but adds a fixed header. It assumes
 *  that the header is in a <header> tag immediately following the opening
 *  <body> tag for the page.
 */

/*
 *  import
 *  Import a font from Google Fonts. If you open the font URL in a browser you
 *  will see the complete font-face definition that is being used.
 *
 *  Google doesn't document this on the Google Fonts page, but you can use
 *  the Google Fonts information to find out what the 'family' parameter
 *  should be set to for the font(s) you want.
 *
 *  If you open the URL in a browser, you will see the complete font-face
 *  definition.
 */
@import url(//fonts.googleapis.com/css?family=Droid+Sans);

/*
 *  font-family
 *  A comma-separated list of the fonts to use, in order of preference. If
 *  a specific font cannot be found, the browser will move on to the next
 *  font. There should always be a fall-back font as the last font, which
 *  should be guaranteed to exist -- this generally means using one of the
 *  default font-family values: serif, sans-serif, etc.
 *
 *  Note that selecting a font is done on a per-character basis. If the
 *  character cannot be found in the first font, the browser will look
 *  through the other fonts.
 */
* { font-family: "Droid Sans", sans-serif; }

html { 
    /*
     *  padding
     *  Specifies the padding, which is the gap between the content of this
     *  element and its enclosing border
     *
     *  Full version:
     *
     *    padding <bottom> <left> <top> <right>
     *
     *  Missing values:
     *
     *    padding <all_paddings>
     *    padding <vertical_paddings> <horizontal_paddings>
     */
    padding: 1em 0;
    
    /*
     *  font-size
     *  Using em values helps with accessibility, as the size is then based on
     *  the default size set by the user's preference. Commonly 1em is 16px.
     *
     *  em values are based on the font size of the parent element (in the case
     *  of the html element this will be the browser default).
     */
    font-size: 1em; /* = 16px */
    
    /*
     *  line-height
     *  Specifies the height of inline elements. If this is a unit-less number
     *  (the advisable way to do it), the actual height is this multiplied by
     *  the font-height.
     */
    line-height: 1.6;
    
}

body {
    /* 
     *  margin
     *  Specifies the margin width, which is the gap between this element and
     *  adjacent elements.
     *
     *  Full version:
     *
     *    margin <top> <right> <bottom> <left>
     *
     *  Missing values:
     *
     *    margin <all_margins>
     *    margin <vertical_margins> <horizontal_margins>
     *
     *  Special values:
     *
     *    auto - fills the margin so that opposite margins occupy the same 
     *           amount of space, hence it can be used to centre an element
     *           within a containing element
     */
    margin: 0 auto;
    
    /*
     *  padding
     *  Specifies the padding, which is the gap between the content of this
     *  element and its enclosing border
     *
     *  Full version:
     *
     *    padding <bottom> <left> <top> <right>
     *
     *  Missing values:
     *
     *    padding <all_paddings>
     *    padding <vertical_paddings> <horizontal_paddings>
     */
    padding: 1em 3em;
    
    /*
     *  max-width
     *  Specifies the maximum width that should be allowed for the element. It
     *  will try to expand to this amount, but if the browser area is too small,
     *  the element will shrink to fit.
     */
    max-width: 768px;
    
}

h1 {
  /*
   *  Remove the top-margin, as the default leaves too big a gap
   */
  margin-top: 0;
}

p {
  /*
   * Set appropriate spacing between paragraphs (and other elements)
   */
  margin-top: 1.5em;
}

code {
    font-family: monospace;
    display: inline-block;
}

body {
    /*
     *  Because the header is fixed at the top, we need to make the main
     *  body of the page start below the header, which we can do by
     *  adding a suitably-sized margin to the top of the page (the header 
     *  itself is unaffected by this, as its position is fixed).
     */
    margin-top: 144px
}

/*
 *  Style the header section that is the direct child of the body
 *  element, and turn it into a fixed element.
 *
 *  Any other header elements on the page will be unaffected.
 */
body > header {
    /*
     *  The header's position is fixed, as opposed to being relative
     *  to any other page element.
     */
    position: fixed;

    /*
     *  Because the header is fixed, we need to specify its actual
     *  position.
     */
    top: 0;
    left: 0;

    /*
     *  Force the header to span the full width of the display area,
     *  otherwise it will only occupy the area needed to display
     *  its contents.
     */
    width: 100%;
    
    background-color: #eeeeee;
    padding: 1em;
}
